/** File : common.proto
    Package : edg.common

    This is where we keep shared types that we reuse and don't have a
    good place for. */

syntax = "proto3";
package edgir.common;

/** Arbitrary metadata stored in tree form. */
message Metadata {
  message Members {
     map<string, Metadata> node = 10;
  }

  /** An unknown type just means we don't have some specific
      expected structure.

      A known type is shorthand to tell us what fields we should
      expect and how to decode the stored data. None of this is
      enforced anywhere, so programmer beware, getting the type
      and other information right is your job. */
  oneof type {
    Empty unknown = 1;
    string known = 2;
  }

  oneof meta {

    Members members = 101;

    string text_leaf = 102;

    /** I wanted to split binary and text data, since we might
        just want to dump a raw file/image/datasheet in here
        for safekeeping.

        Mixing up binary and textual formats is just a recipe
        for trouble. */
    bytes bin_leaf = 103;

    // Defined formats
    // Note: key should be the message definition name (eg, SourceLocator)
    // TODO: how to handle multiple metadata of a given type?
    SourceLocator source_locator = 110;
    Error error = 112;
  }
}


/** Definitions for structured metadata formats */

/** For locating source data */
message SourceLocator {
  string file_package = 1;  // package name (portable, not tied to an absolute path) that locates the file
  int32 line_offset = 2;  // line number
  int32 col_offset = 3;  // character offset within the line

  enum SourceType {
    UNKNOWN = 0;
    DEFINITION = 1;  // source defining this class, would be present in library
    INSTANTIATION = 2;  // source of instantiation, would be present in design
  }
  SourceType source_type = 4;
}


/** Used to communicate results of analysis / checking passes.
 Limited to Block and Link objects. */
message Error {
  string message = 1;  // free-form error message
  string traceback = 3;  // full traceback  TODO: should there be a structured stack trace?
  repeated SourceLocator source = 2;  // source locator, eg line of failing constraint
}

/** Placeholder until I figure out how to import properly */
message Empty {}
