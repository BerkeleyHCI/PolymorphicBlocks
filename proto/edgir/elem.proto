/**
   File : elem.proto
   Package : edg.elem

   Elements (Blocks, Ports, Links, and Envs) are all equivalent to
   a set of declarations with some typing information, howver it is
   much nicer to parse them out into more concrete structures.

   We don't strictly differentiate between library elements and
   elements within a design within the protobuf. In general, when
   there is a library element, we
 */

syntax = "proto3";
package edgir.elem;
import "edgir/common.proto";
import "edgir/init.proto";
import "edgir/expr.proto";
import "edgir/ref.proto";


// These are essentially a element in a map<string, value>, but because maps
// are unordered (whereas we want to preserve ordering to preserve design intent
// through the compiler), we use a sequence of these pairs.
message NamedValInit {
  string name = 1;
  edgir.init.ValInit value = 2;
}

message NamedValueExpr {
  string name = 1;
  edgir.expr.ValueExpr value = 2;
}

message NamedPortLike {
  string name = 1;
  PortLike value = 2;
}

message NamedBlockLike {
  string name = 1;
  BlockLike value = 2;
}

message NamedLinkLike {
  string name = 1;
  LinkLike value = 2;
}


message Port {
  repeated NamedValInit params = 40;
  repeated NamedValueExpr constraints = 41;

  edgir.ref.LibraryPath self_class = 20;
  repeated edgir.ref.LibraryPath superclasses = 21;  // superclasses, may be empty
  repeated edgir.ref.LibraryPath super_superclasses = 24;  // all (recursive) superclasses above superclasses
  // TODO: this provides type hierarchy data only, inheritance semantics are currently undefined

  edgir.common.Metadata meta = 127;
}

message Bundle {
  repeated NamedValInit params = 40;
  repeated NamedPortLike ports = 41;
  repeated NamedValueExpr constraints = 42;

  edgir.ref.LibraryPath self_class = 20;
  repeated edgir.ref.LibraryPath superclasses = 21;  // superclasses, may be empty
  repeated edgir.ref.LibraryPath super_superclasses = 24;  // all (recursive) superclasses above superclasses

  edgir.common.Metadata meta = 127;
}

message PortArray {
  message Ports {
    repeated NamedPortLike ports = 40;
  }

  /* The class that applies to every port in the set/array. Used
     when a new port is instantiated by the front or back end. */
  edgir.ref.LibraryPath self_class = 20;

  /* Library blocks may define ports (if fixed number of ports) or not (for generators or abstract blocks).
     A valid design must define ports, but the ports may be empty. */
  oneof contains {
    Ports ports = 14;
  }

  edgir.common.Metadata meta = 127;
}

/** Wrapper for different port like elements */
message PortLike {
  oneof is {
    edgir.common.Empty undefined = 1;
    edgir.ref.LibraryPath lib_elem = 2;
    /** 'port' disallowed w/in the library */
    Port       port   = 3;
    PortArray  array  = 4;
    /** 'bundle' disallowed w/in the library */
    Bundle     bundle = 6;
  }
}

message Parameter {
  edgir.ref.LocalPath path = 1;
  string unit = 2;
}

message StringDescriptionElement {
  oneof ElementType {
    string text = 1;
    Parameter param = 2;
  }
}

message HierarchyBlock {
  repeated NamedValInit params = 40;
  // Refinements may introduce new parameters which would not be assigned a value in the parent class.
  // In those cases, those new parameters are given these default values.
  map<string, edgir.expr.ValueExpr> param_defaults = 15;  // unordered
  repeated NamedPortLike ports  = 41;
  /** Bridges, which adapt an edge port to a link port - eg, edge VoltageSink to an internal link
      VoltageSource, are defined as blocks in the IR. Upper layers can define convenience constructs and/or
      infer these blocks. */
  repeated NamedBlockLike blocks = 42;
  repeated NamedLinkLike links  = 43;
  /** Connections between internal block and link ports are represented by connected constraints.
      Connections between internal; block and edge (of this block) ports are represented by exported constraints. */
  repeated NamedValueExpr constraints = 44;

  edgir.ref.LibraryPath self_class = 23;  // self class, equivalent to the library name
  repeated edgir.ref.LibraryPath superclasses = 20;  // immediate superclasses, may be empty
  repeated edgir.ref.LibraryPath super_superclasses = 24;  // all (recursive) superclasses above superclasses
  edgir.ref.LibraryPath prerefine_class = 21;  // class pre-refinement, only defined if refined
  repeated edgir.ref.LibraryPath prerefine_mixins = 25;  // mixins pre-refinement, from library elem
  Generator                       generator = 22;  // optional, and removed upon invocation

  bool is_abstract = 30;  // true if self_class is abstract, and should error if used in a design
  edgir.ref.LibraryPath default_refinement = 31;  // optional default refinement subclass, only valid for library blocks

  edgir.common.Metadata meta = 127;

  repeated StringDescriptionElement description = 1;
}

message Generator {
  // Parameters that must be defined for the generator to fire.
  // These parameters are the only ones accessible to the generator.
  repeated edgir.ref.LocalPath required_params = 2;
}

message BlockLibrary {
  edgir.ref.LibraryPath base = 2;
  repeated edgir.ref.LibraryPath mixins = 3;
}

message BlockLike {
  oneof type {
    edgir.common.Empty undefined = 1;
    BlockLibrary lib_elem = 5;
    /** not allowed w/in the library */
    HierarchyBlock hierarchy = 4;
  }
}

message Link {
  repeated NamedValInit params = 40;
  repeated NamedPortLike ports = 41;
  repeated NamedLinkLike links = 43;
  repeated NamedValueExpr constraints = 42;

  edgir.ref.LibraryPath self_class = 20;
  repeated edgir.ref.LibraryPath superclasses = 21;  // superclasses, may be empty
  repeated edgir.ref.LibraryPath super_superclasses = 24;  // all (recursive) superclasses above superclasses
  // TODO: this provides type hierarchy data only, inheritance semantics are currently undefined

  edgir.common.Metadata meta = 127;

  repeated StringDescriptionElement description = 1;
}

message LinkArray {
  /* The class that applies to every link in the set/array. Used
     when a new link is instantiated by the front or back end. */
  edgir.ref.LibraryPath self_class = 20;

  /* Only designs should contain an implementation here */
  repeated NamedPortLike ports = 41;  // the last index is the index of the link, the first indices (if any) are the indices of the corresponding port in the inner link
  repeated NamedValueExpr constraints = 42;  // includes all exported constraints to map link ports to my ports
  repeated NamedLinkLike links = 43;

  edgir.common.Metadata meta = 127;
}

message LinkLike {
  oneof type {
    edgir.common.Empty undefined = 1;

    edgir.ref.LibraryPath lib_elem = 2;

    /** not allowed w/in the library */
    Link link = 3;
    LinkArray array = 4;
  }
}
