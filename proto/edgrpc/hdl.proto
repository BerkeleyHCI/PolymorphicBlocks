/** Defines messages for a service provided in Python that exposes
    HDL-to-edgir elaboration for a compiler in a different process / language.
*/

syntax = "proto3";
package edgrpc.hdl;

import "edgir/schema.proto";
import "edgir/ref.proto";
import "edgir/elem.proto";
import "edgir/lit.proto";


message Refinements {
  message Subclass {
    oneof source {
      edgir.ref.LocalPath path = 1;
      edgir.ref.LibraryPath cls = 2;
    }
    edgir.ref.LibraryPath replacement = 3;
  }
  message Value {
    message ClassParamPath {
      edgir.ref.LibraryPath cls = 1;
      edgir.ref.LocalPath param_path = 2;
    }
    oneof source {
      edgir.ref.LocalPath path = 1;
      ClassParamPath cls_param = 2;
    }
    edgir.lit.ValueLit value = 3;
  }
  repeated Subclass subclasses = 1;
  repeated Value values = 2;
}


message ModuleName {
  string name = 1;
}

message IndexResponse {
  repeated edgir.ref.LibraryPath indexed = 1;
}


message LibraryRequest {
  edgir.ref.LibraryPath element = 2;  // library element asked for
}

message LibraryResponse {
  edgir.schema.Library.NS.Val element = 1;
  Refinements refinements = 3;  // only valid if element is a top-level block
}


message GeneratorRequest {
  edgir.ref.LibraryPath element = 2;  // path of library element containing the generator

  message Value {
    edgir.ref.LocalPath path = 1;
    edgir.lit.ValueLit value = 2;
  }
  repeated Value values = 4;
}

message GeneratorResponse {
  edgir.elem.HierarchyBlock generated = 1;
}


// Runs a backend - something that generates fabrication artifacts from a compiled design tree
// eg, generate KiCad netlist, or generate microcontroller firmware pinmap headers
message BackendRequest {
  edgir.ref.LibraryPath backend = 1;
  edgir.schema.Design design = 2;

  message Value {  // TODO dedup w/ same def in compiler.CompilerResult
    edgir.ref.LocalPath path = 1;
    edgir.lit.ValueLit value = 2;
  }

  repeated Value solvedValues = 3;
  map<string, string> arguments = 4;
}

message BackendResponse {
  message Result {
    edgir.ref.LocalPath path = 1;  // path of corresponding element in design tree
    oneof result {
      string text = 2;  // for now, only text supported, for KiCad netlisting
    }
  }
  repeated Result results = 1;
}


message ErrorResponse {  // catch all error response
  string error = 1;
  string traceback = 2;
}


message HdlRequest {
  oneof request {
    ModuleName index_module = 1;  // returns an index of IR elements in a Python module
    LibraryRequest get_library_element = 2;  // returns the IR for a library element
    GeneratorRequest elaborate_generator = 3;  // returns the elaborated IR
    BackendRequest run_backend = 4;
  }
}

message HdlResponse {
  oneof response {
    IndexResponse index_module = 1;  // list of contained library elements
    LibraryResponse get_library_element = 2;
    GeneratorResponse elaborate_generator = 3;
    BackendResponse run_backend = 4;

    ErrorResponse error = 99;
  }
}
