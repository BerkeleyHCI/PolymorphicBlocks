"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
*
File : lit.proto
Package : edg.lit

Literals for assorted priitive types, i.e fixed constant values.
"""
import builtins
import collections.abc
from .. import edgir
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions
DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class FloatLit(google.protobuf.message.Message):
    """* The core expression primitives we start with are the value
    literals that we can use
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VAL_FIELD_NUMBER: builtins.int
    val: builtins.float

    def __init__(self, *, val: builtins.float=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['val', b'val']) -> None:
        ...
global___FloatLit = FloatLit

@typing_extensions.final
class IntLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VAL_FIELD_NUMBER: builtins.int
    val: builtins.int

    def __init__(self, *, val: builtins.int=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['val', b'val']) -> None:
        ...
global___IntLit = IntLit

@typing_extensions.final
class BoolLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VAL_FIELD_NUMBER: builtins.int
    val: builtins.bool

    def __init__(self, *, val: builtins.bool=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['val', b'val']) -> None:
        ...
global___BoolLit = BoolLit

@typing_extensions.final
class TextLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    VAL_FIELD_NUMBER: builtins.int
    val: builtins.str

    def __init__(self, *, val: builtins.str=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['val', b'val']) -> None:
        ...
global___TextLit = TextLit

@typing_extensions.final
class RangeLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    MINIMUM_FIELD_NUMBER: builtins.int
    MAXIMUM_FIELD_NUMBER: builtins.int

    @property
    def minimum(self) -> global___ValueLit:
        ...

    @property
    def maximum(self) -> global___ValueLit:
        ...

    def __init__(self, *, minimum: global___ValueLit | None=..., maximum: global___ValueLit | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['maximum', b'maximum', 'minimum', b'minimum']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['maximum', b'maximum', 'minimum', b'minimum']) -> None:
        ...
global___RangeLit = RangeLit

@typing_extensions.final
class StructLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MembersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str

        @property
        def value(self) -> global___ValueLit:
            ...

        def __init__(self, *, key: builtins.str=..., value: global___ValueLit | None=...) -> None:
            ...

        def HasField(self, field_name: typing_extensions.Literal['value', b'value']) -> builtins.bool:
            ...

        def ClearField(self, field_name: typing_extensions.Literal['key', b'key', 'value', b'value']) -> None:
            ...
    MEMBERS_FIELD_NUMBER: builtins.int

    @property
    def members(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___ValueLit]:
        ...

    def __init__(self, *, members: collections.abc.Mapping[builtins.str, global___ValueLit] | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['members', b'members']) -> None:
        ...
global___StructLit = StructLit

@typing_extensions.final
class ArrayLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ELTS_FIELD_NUMBER: builtins.int

    @property
    def elts(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ValueLit]:
        ...

    def __init__(self, *, elts: collections.abc.Iterable[global___ValueLit] | None=...) -> None:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['elts', b'elts']) -> None:
        ...
global___ArrayLit = ArrayLit

@typing_extensions.final
class ValueLit(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    FLOATING_FIELD_NUMBER: builtins.int
    INTEGER_FIELD_NUMBER: builtins.int
    BOOLEAN_FIELD_NUMBER: builtins.int
    TEXT_FIELD_NUMBER: builtins.int
    STRUCT_FIELD_NUMBER: builtins.int
    RANGE_FIELD_NUMBER: builtins.int
    ARRAY_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int

    @property
    def floating(self) -> global___FloatLit:
        ...

    @property
    def integer(self) -> global___IntLit:
        ...

    @property
    def boolean(self) -> global___BoolLit:
        ...

    @property
    def text(self) -> global___TextLit:
        ...

    @property
    def struct(self) -> global___StructLit:
        ...

    @property
    def range(self) -> global___RangeLit:
        ...

    @property
    def array(self) -> global___ArrayLit:
        ...

    @property
    def meta(self) -> edgir.common_pb2.Metadata:
        ...

    def __init__(self, *, floating: global___FloatLit | None=..., integer: global___IntLit | None=..., boolean: global___BoolLit | None=..., text: global___TextLit | None=..., struct: global___StructLit | None=..., range: global___RangeLit | None=..., array: global___ArrayLit | None=..., meta: edgir.common_pb2.Metadata | None=...) -> None:
        ...

    def HasField(self, field_name: typing_extensions.Literal['array', b'array', 'boolean', b'boolean', 'floating', b'floating', 'integer', b'integer', 'meta', b'meta', 'range', b'range', 'struct', b'struct', 'text', b'text', 'type', b'type']) -> builtins.bool:
        ...

    def ClearField(self, field_name: typing_extensions.Literal['array', b'array', 'boolean', b'boolean', 'floating', b'floating', 'integer', b'integer', 'meta', b'meta', 'range', b'range', 'struct', b'struct', 'text', b'text', 'type', b'type']) -> None:
        ...

    def WhichOneof(self, oneof_group: typing_extensions.Literal['type', b'type']) -> typing_extensions.Literal['floating', 'integer', 'boolean', 'text', 'struct', 'range', 'array'] | None:
        ...
global___ValueLit = ValueLit