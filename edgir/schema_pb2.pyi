"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import edgir.common_pb2
import edgir.elem_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

#* This is the top-level schema for a library of blocks, ports, and links.
#
#It need not be complete (containing all the blocks to be used in a design)
#or closed (containing enough information that every reference/inheritance
#can be resolved).
#
#It can be merged with other libraries when there are no namespace collisions
#or definitional conflicts. This means that we can shuffle around partial
#libraries, for merging, modification, etc..
class Library(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    #* Library Namespace, avoiding collision w/ edg.name.Namespace
    class NS(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        class Val(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            PORT_FIELD_NUMBER: builtins.int
            BUNDLE_FIELD_NUMBER: builtins.int
            HIERARCHY_BLOCK_FIELD_NUMBER: builtins.int
            LINK_FIELD_NUMBER: builtins.int
            NAMESPACE_FIELD_NUMBER: builtins.int
            @property
            def port(self) -> edgir.elem_pb2.Port: ...
            @property
            def bundle(self) -> edgir.elem_pb2.Bundle: ...
            @property
            def hierarchy_block(self) -> edgir.elem_pb2.HierarchyBlock: ...
            @property
            def link(self) -> edgir.elem_pb2.Link: ...
            @property
            def namespace(self) -> global___Library.NS: ...
            def __init__(self,
                *,
                port : typing.Optional[edgir.elem_pb2.Port] = ...,
                bundle : typing.Optional[edgir.elem_pb2.Bundle] = ...,
                hierarchy_block : typing.Optional[edgir.elem_pb2.HierarchyBlock] = ...,
                link : typing.Optional[edgir.elem_pb2.Link] = ...,
                namespace : typing.Optional[global___Library.NS] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal[u"bundle",b"bundle",u"hierarchy_block",b"hierarchy_block",u"link",b"link",u"namespace",b"namespace",u"port",b"port",u"type",b"type"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal[u"bundle",b"bundle",u"hierarchy_block",b"hierarchy_block",u"link",b"link",u"namespace",b"namespace",u"port",b"port",u"type",b"type"]) -> None: ...
            def WhichOneof(self, oneof_group: typing_extensions.Literal[u"type",b"type"]) -> typing.Optional[typing_extensions.Literal["port","bundle","hierarchy_block","link","namespace"]]: ...

        class MembersEntry(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
            KEY_FIELD_NUMBER: builtins.int
            VALUE_FIELD_NUMBER: builtins.int
            key: typing.Text = ...
            @property
            def value(self) -> global___Library.NS.Val: ...
            def __init__(self,
                *,
                key : typing.Text = ...,
                value : typing.Optional[global___Library.NS.Val] = ...,
                ) -> None: ...
            def HasField(self, field_name: typing_extensions.Literal[u"value",b"value"]) -> builtins.bool: ...
            def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        MEMBERS_FIELD_NUMBER: builtins.int
        @property
        def members(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___Library.NS.Val]: ...
        def __init__(self,
            *,
            members : typing.Optional[typing.Mapping[typing.Text, global___Library.NS.Val]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"members",b"members"]) -> None: ...

    #* How we identify a library within a set. Will probably
    #evolve to capture more metadata.
    class LibIdent(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        NAME_FIELD_NUMBER: builtins.int
        name: typing.Text = ...
        def __init__(self,
            *,
            name : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"name",b"name"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    IMPORTS_FIELD_NUMBER: builtins.int
    ROOT_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int
    @property
    def id(self) -> global___Library.LibIdent: ...
    @property
    def imports(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]: ...
    @property
    def root(self) -> global___Library.NS: ...
    @property
    def meta(self) -> edgir.common_pb2.Metadata: ...
    def __init__(self,
        *,
        id : typing.Optional[global___Library.LibIdent] = ...,
        imports : typing.Optional[typing.Iterable[typing.Text]] = ...,
        root : typing.Optional[global___Library.NS] = ...,
        meta : typing.Optional[edgir.common_pb2.Metadata] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"id",b"id",u"meta",b"meta",u"root",b"root"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"id",b"id",u"imports",b"imports",u"meta",b"meta",u"root",b"root"]) -> None: ...
global___Library = Library

#* This is a Design for an embedded system at some level of abstraction.
class Design(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    CONTENTS_FIELD_NUMBER: builtins.int
    #* Delegate the actual contents of the design to a hierarchy block, for which ports are ignored
    @property
    def contents(self) -> edgir.elem_pb2.HierarchyBlock: ...
    def __init__(self,
        *,
        contents : typing.Optional[edgir.elem_pb2.HierarchyBlock] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"contents",b"contents"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"contents",b"contents"]) -> None: ...
global___Design = Design
