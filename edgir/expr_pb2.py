# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: edgir/expr.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from edgir import ref_pb2 as edgir_dot_ref__pb2
from edgir import common_pb2 as edgir_dot_common__pb2
from edgir import lit_pb2 as edgir_dot_lit__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10\x65\x64gir/expr.proto\x12\nedgir.expr\x1a\x0f\x65\x64gir/ref.proto\x1a\x12\x65\x64gir/common.proto\x1a\x0f\x65\x64gir/lit.proto\"\xb4\x01\n\tUnaryExpr\x12$\n\x02op\x18\x01 \x01(\x0e\x32\x18.edgir.expr.UnaryExpr.Op\x12\"\n\x03val\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"]\n\x02Op\x12\r\n\tUNDEFINED\x10\x00\x12\n\n\x06NEGATE\x10\x01\x12\x07\n\x03NOT\x10\x02\x12\n\n\x06INVERT\x10\x03\x12\x07\n\x03MIN\x10\x04\x12\x07\n\x03MAX\x10\x05\x12\n\n\x06\x43\x45NTER\x10\x06\x12\t\n\x05WIDTH\x10\x07\"\x92\x02\n\x0cUnarySetExpr\x12\'\n\x02op\x18\x01 \x01(\x0e\x32\x1b.edgir.expr.UnarySetExpr.Op\x12#\n\x04vals\x18\x04 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"\xb3\x01\n\x02Op\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03SUM\x10\x01\x12\x0c\n\x08\x41LL_TRUE\x10\x02\x12\x0c\n\x08\x41NY_TRUE\x10\x03\x12\n\n\x06\x41LL_EQ\x10\x04\x12\x0e\n\nALL_UNIQUE\x10\x05\x12\x0b\n\x07MAXIMUM\x10\n\x12\x0b\n\x07MINIMUM\x10\x0b\x12\x0f\n\x0bSET_EXTRACT\x10\x0c\x12\x10\n\x0cINTERSECTION\x10\r\x12\x08\n\x04HULL\x10\x0e\x12\n\n\x06NEGATE\x10\x14\x12\n\n\x06INVERT\x10\x15\"\xc3\x02\n\nBinaryExpr\x12%\n\x02op\x18\x01 \x01(\x0e\x32\x19.edgir.expr.BinaryExpr.Op\x12\"\n\x03lhs\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\"\n\x03rhs\x18\x03 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"\xc5\x01\n\x02Op\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03\x41\x44\x44\x10\n\x12\x08\n\x04MULT\x10\x0c\x12\x07\n\x03\x41ND\x10\x14\x12\x06\n\x02OR\x10\x15\x12\x07\n\x03XOR\x10\x16\x12\x0b\n\x07IMPLIES\x10\x17\x12\x06\n\x02\x45Q\x10\x1e\x12\x07\n\x03NEQ\x10\x1f\x12\x06\n\x02GT\x10(\x12\x07\n\x03GTE\x10)\x12\x06\n\x02LT\x10*\x12\x07\n\x03LTE\x10,\x12\x07\n\x03MAX\x10-\x12\x07\n\x03MIN\x10.\x12\x10\n\x0cINTERSECTION\x10\x33\x12\x08\n\x04HULL\x10\x36\x12\n\n\x06WITHIN\x10\x35\x12\t\n\x05RANGE\x10\x01\"\xab\x01\n\rBinarySetExpr\x12(\n\x02op\x18\x01 \x01(\x0e\x32\x1c.edgir.expr.BinarySetExpr.Op\x12$\n\x05lhset\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\"\n\x03rhs\x18\x03 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"&\n\x02Op\x12\r\n\tUNDEFINED\x10\x00\x12\x07\n\x03\x41\x44\x44\x10\n\x12\x08\n\x04MULT\x10\x0c\"[\n\tRangeExpr\x12&\n\x07minimum\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12&\n\x07maximum\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"\x80\x01\n\nStructExpr\x12.\n\x04vals\x18\x01 \x03(\x0b\x32 .edgir.expr.StructExpr.ValsEntry\x1a\x42\n\tValsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12$\n\x05value\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr:\x02\x38\x01\"\xa3\x01\n\x0eIfThenElseExpr\x12#\n\x04\x63ond\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\"\n\x03tru\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\"\n\x03\x66\x61l\x18\x03 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12$\n\x04meta\x18\x7f \x01(\x0b\x32\x16.edgir.common.Metadata\"]\n\x0b\x45xtractExpr\x12(\n\tcontainer\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12$\n\x05index\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"^\n\x0eMapExtractExpr\x12(\n\tcontainer\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\"\n\x04path\x18\x02 \x01(\x0b\x32\x14.edgir.ref.LocalPath\"d\n\rConnectedExpr\x12)\n\nblock_port\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12(\n\tlink_port\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"p\n\x0c\x45xportedExpr\x12,\n\rexterior_port\x18\x01 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\x12\x32\n\x13internal_block_port\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"S\n\nAssignExpr\x12!\n\x03\x64st\x18\x01 \x01(\x0b\x32\x14.edgir.ref.LocalPath\x12\"\n\x03src\x18\x02 \x01(\x0b\x32\x15.edgir.expr.ValueExpr\"\xef\x06\n\tValueExpr\x12&\n\x07literal\x18\x01 \x01(\x0b\x32\x13.edgir.lit.ValueLitH\x00\x12(\n\x06\x62inary\x18\x02 \x01(\x0b\x32\x16.edgir.expr.BinaryExprH\x00\x12/\n\nbinary_set\x18\x12 \x01(\x0b\x32\x19.edgir.expr.BinarySetExprH\x00\x12&\n\x05unary\x18\x03 \x01(\x0b\x32\x15.edgir.expr.UnaryExprH\x00\x12-\n\tunary_set\x18\x04 \x01(\x0b\x32\x18.edgir.expr.UnarySetExprH\x00\x12(\n\x06struct\x18\x07 \x01(\x0b\x32\x16.edgir.expr.StructExprH\x00\x12&\n\x05range\x18\x08 \x01(\x0b\x32\x15.edgir.expr.RangeExprH\x00\x12\x30\n\nifThenElse\x18\n \x01(\x0b\x32\x1a.edgir.expr.IfThenElseExprH\x00\x12*\n\x07\x65xtract\x18\x0c \x01(\x0b\x32\x17.edgir.expr.ExtractExprH\x00\x12\x31\n\x0bmap_extract\x18\x0e \x01(\x0b\x32\x1a.edgir.expr.MapExtractExprH\x00\x12.\n\tconnected\x18\x0f \x01(\x0b\x32\x19.edgir.expr.ConnectedExprH\x00\x12,\n\x08\x65xported\x18\x10 \x01(\x0b\x32\x18.edgir.expr.ExportedExprH\x00\x12\x33\n\x0e\x63onnectedArray\x18\x13 \x01(\x0b\x32\x19.edgir.expr.ConnectedExprH\x00\x12\x31\n\rexportedArray\x18\x14 \x01(\x0b\x32\x18.edgir.expr.ExportedExprH\x00\x12(\n\x06\x61ssign\x18\x11 \x01(\x0b\x32\x16.edgir.expr.AssignExprH\x00\x12\x32\n\x0e\x65xportedTunnel\x18\x15 \x01(\x0b\x32\x18.edgir.expr.ExportedExprH\x00\x12.\n\x0c\x61ssignTunnel\x18\x16 \x01(\x0b\x32\x16.edgir.expr.AssignExprH\x00\x12#\n\x03ref\x18\x63 \x01(\x0b\x32\x14.edgir.ref.LocalPathH\x00\x12$\n\x04meta\x18\x7f \x01(\x0b\x32\x16.edgir.common.MetadataB\x06\n\x04\x65xprb\x06proto3')



_UNARYEXPR = DESCRIPTOR.message_types_by_name['UnaryExpr']
_UNARYSETEXPR = DESCRIPTOR.message_types_by_name['UnarySetExpr']
_BINARYEXPR = DESCRIPTOR.message_types_by_name['BinaryExpr']
_BINARYSETEXPR = DESCRIPTOR.message_types_by_name['BinarySetExpr']
_RANGEEXPR = DESCRIPTOR.message_types_by_name['RangeExpr']
_STRUCTEXPR = DESCRIPTOR.message_types_by_name['StructExpr']
_STRUCTEXPR_VALSENTRY = _STRUCTEXPR.nested_types_by_name['ValsEntry']
_IFTHENELSEEXPR = DESCRIPTOR.message_types_by_name['IfThenElseExpr']
_EXTRACTEXPR = DESCRIPTOR.message_types_by_name['ExtractExpr']
_MAPEXTRACTEXPR = DESCRIPTOR.message_types_by_name['MapExtractExpr']
_CONNECTEDEXPR = DESCRIPTOR.message_types_by_name['ConnectedExpr']
_EXPORTEDEXPR = DESCRIPTOR.message_types_by_name['ExportedExpr']
_ASSIGNEXPR = DESCRIPTOR.message_types_by_name['AssignExpr']
_VALUEEXPR = DESCRIPTOR.message_types_by_name['ValueExpr']
_UNARYEXPR_OP = _UNARYEXPR.enum_types_by_name['Op']
_UNARYSETEXPR_OP = _UNARYSETEXPR.enum_types_by_name['Op']
_BINARYEXPR_OP = _BINARYEXPR.enum_types_by_name['Op']
_BINARYSETEXPR_OP = _BINARYSETEXPR.enum_types_by_name['Op']
UnaryExpr = _reflection.GeneratedProtocolMessageType('UnaryExpr', (_message.Message,), {
  'DESCRIPTOR' : _UNARYEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.UnaryExpr)
  })
_sym_db.RegisterMessage(UnaryExpr)

UnarySetExpr = _reflection.GeneratedProtocolMessageType('UnarySetExpr', (_message.Message,), {
  'DESCRIPTOR' : _UNARYSETEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.UnarySetExpr)
  })
_sym_db.RegisterMessage(UnarySetExpr)

BinaryExpr = _reflection.GeneratedProtocolMessageType('BinaryExpr', (_message.Message,), {
  'DESCRIPTOR' : _BINARYEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.BinaryExpr)
  })
_sym_db.RegisterMessage(BinaryExpr)

BinarySetExpr = _reflection.GeneratedProtocolMessageType('BinarySetExpr', (_message.Message,), {
  'DESCRIPTOR' : _BINARYSETEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.BinarySetExpr)
  })
_sym_db.RegisterMessage(BinarySetExpr)

RangeExpr = _reflection.GeneratedProtocolMessageType('RangeExpr', (_message.Message,), {
  'DESCRIPTOR' : _RANGEEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.RangeExpr)
  })
_sym_db.RegisterMessage(RangeExpr)

StructExpr = _reflection.GeneratedProtocolMessageType('StructExpr', (_message.Message,), {

  'ValsEntry' : _reflection.GeneratedProtocolMessageType('ValsEntry', (_message.Message,), {
    'DESCRIPTOR' : _STRUCTEXPR_VALSENTRY,
    '__module__' : 'edgir.expr_pb2'
    # @@protoc_insertion_point(class_scope:edgir.expr.StructExpr.ValsEntry)
    })
  ,
  'DESCRIPTOR' : _STRUCTEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.StructExpr)
  })
_sym_db.RegisterMessage(StructExpr)
_sym_db.RegisterMessage(StructExpr.ValsEntry)

IfThenElseExpr = _reflection.GeneratedProtocolMessageType('IfThenElseExpr', (_message.Message,), {
  'DESCRIPTOR' : _IFTHENELSEEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.IfThenElseExpr)
  })
_sym_db.RegisterMessage(IfThenElseExpr)

ExtractExpr = _reflection.GeneratedProtocolMessageType('ExtractExpr', (_message.Message,), {
  'DESCRIPTOR' : _EXTRACTEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.ExtractExpr)
  })
_sym_db.RegisterMessage(ExtractExpr)

MapExtractExpr = _reflection.GeneratedProtocolMessageType('MapExtractExpr', (_message.Message,), {
  'DESCRIPTOR' : _MAPEXTRACTEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.MapExtractExpr)
  })
_sym_db.RegisterMessage(MapExtractExpr)

ConnectedExpr = _reflection.GeneratedProtocolMessageType('ConnectedExpr', (_message.Message,), {
  'DESCRIPTOR' : _CONNECTEDEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.ConnectedExpr)
  })
_sym_db.RegisterMessage(ConnectedExpr)

ExportedExpr = _reflection.GeneratedProtocolMessageType('ExportedExpr', (_message.Message,), {
  'DESCRIPTOR' : _EXPORTEDEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.ExportedExpr)
  })
_sym_db.RegisterMessage(ExportedExpr)

AssignExpr = _reflection.GeneratedProtocolMessageType('AssignExpr', (_message.Message,), {
  'DESCRIPTOR' : _ASSIGNEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.AssignExpr)
  })
_sym_db.RegisterMessage(AssignExpr)

ValueExpr = _reflection.GeneratedProtocolMessageType('ValueExpr', (_message.Message,), {
  'DESCRIPTOR' : _VALUEEXPR,
  '__module__' : 'edgir.expr_pb2'
  # @@protoc_insertion_point(class_scope:edgir.expr.ValueExpr)
  })
_sym_db.RegisterMessage(ValueExpr)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _STRUCTEXPR_VALSENTRY._options = None
  _STRUCTEXPR_VALSENTRY._serialized_options = b'8\001'
  _UNARYEXPR._serialized_start=87
  _UNARYEXPR._serialized_end=267
  _UNARYEXPR_OP._serialized_start=174
  _UNARYEXPR_OP._serialized_end=267
  _UNARYSETEXPR._serialized_start=270
  _UNARYSETEXPR._serialized_end=544
  _UNARYSETEXPR_OP._serialized_start=365
  _UNARYSETEXPR_OP._serialized_end=544
  _BINARYEXPR._serialized_start=547
  _BINARYEXPR._serialized_end=870
  _BINARYEXPR_OP._serialized_start=673
  _BINARYEXPR_OP._serialized_end=870
  _BINARYSETEXPR._serialized_start=873
  _BINARYSETEXPR._serialized_end=1044
  _BINARYSETEXPR_OP._serialized_start=673
  _BINARYSETEXPR_OP._serialized_end=711
  _RANGEEXPR._serialized_start=1046
  _RANGEEXPR._serialized_end=1137
  _STRUCTEXPR._serialized_start=1140
  _STRUCTEXPR._serialized_end=1268
  _STRUCTEXPR_VALSENTRY._serialized_start=1202
  _STRUCTEXPR_VALSENTRY._serialized_end=1268
  _IFTHENELSEEXPR._serialized_start=1271
  _IFTHENELSEEXPR._serialized_end=1434
  _EXTRACTEXPR._serialized_start=1436
  _EXTRACTEXPR._serialized_end=1529
  _MAPEXTRACTEXPR._serialized_start=1531
  _MAPEXTRACTEXPR._serialized_end=1625
  _CONNECTEDEXPR._serialized_start=1627
  _CONNECTEDEXPR._serialized_end=1727
  _EXPORTEDEXPR._serialized_start=1729
  _EXPORTEDEXPR._serialized_end=1841
  _ASSIGNEXPR._serialized_start=1843
  _ASSIGNEXPR._serialized_end=1926
  _VALUEEXPR._serialized_start=1929
  _VALUEEXPR._serialized_end=2808
# @@protoc_insertion_point(module_scope)
