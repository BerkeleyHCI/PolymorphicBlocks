/**
   File : schema.proto
   Package : edg.schema

   These types contain the highest level data structures we use to
   describe sets of blocks, ports, and links.
 */

syntax = "proto3";
package edg.schema;
import "common.proto";
import "elem.proto";

/** This is the top-level schema for a library of blocks, ports, and links.

    It need not be complete (containing all the blocks to be used in a design)
    or closed (containing enough information that every reference/inheritance
    can be resolved).

    It can be merged with other libraries when there are no namespace collisions
    or definitional conflicts. This means that we can shuffle around partial
    libraries, for merging, modification, etc.. */
message Library {

  /** Library Namespace, avoiding collision w/ edg.name.Namespace */
  message NS {
    message Val {
      oneof type {
        edg.elem.Port port = 10;
        edg.elem.Bundle bundle = 11;
//        edg.elem.Block block = 12;
        edg.elem.HierarchyBlock hierarchy_block = 13;
        edg.elem.Link link = 14;
//        edg.elem.Env env = 15;
        NS namespace = 20;
      }
    }

    map<string,Val> members = 1;
  }

  /** How we identify a library within a set. Will probably
      evolve to capture more metadata. */
  message LibIdent {
    string name = 1;
  }

  LibIdent id = 1;

  repeated string imports = 2;

  NS root = 10;

  edg.common.Metadata meta = 127;

}

/** This is a Design for an embedded system at some level of abstraction. */
message Design {

  /** There is a root environment for every design. */
//  edg.elem.Env root = 1;

  /** Delegate the actual contents of the design to a hierarchy block, for which ports are ignored */
  edg.elem.HierarchyBlock contents = 2;
}
